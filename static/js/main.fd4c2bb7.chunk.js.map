{"version":3,"sources":["components/ListFooter.component.js","App.js","serviceWorker.js","index.js"],"names":["ListFooter","itemsLeft","clearButton","this","props","completedNumber","className","onClick","handleClear","activeNumber","id","href","handleAll","handleClick","handleComplete","React","Component","enterKey","App","handleKeyDown","event","keyCode","handleSubmit","handleChange","setState","value","target","preventDefault","todos","state","push","text","refs","newText","completed","todoCount","prevState","map","todo","changeAll","all","handleActive","active","complete","clearComplete","clearData","filter","selectAll","destroy","candidate","setTimeout","completedStyle","color","textDecoration","activeItemsData","activeItems","index","key","style","type","onChange","checked","bind","completeItemsData","completeItems","todoItems","ref","placeholder","onKeyDown","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd4c2bb7.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default class ListFooter extends React.Component {\n  render() {\n    var clearButton = null;\n    if (this.props.completedNumber > 0) {\n      clearButton = (\n        <button className=\"clear-completed\" onClick={this.props.handleClear}>\n          Clear Completed\n        </button>\n      );\n    }\n\n    var itemsLeft;\n    if (this.props.activeNumber !== 1) {\n      itemsLeft = (\n        <p id=\"todo-number-display\">{this.props.activeNumber} items left</p>\n      );\n    } else {\n      itemsLeft = (\n        <p id=\"todo-number-display\">{this.props.activeNumber} item left</p>\n      );\n    }\n\n    return (\n      <div className=\"list-footer\">\n        {itemsLeft}\n        <div className=\"toggleButtons\">\n          <a href=\"#/all\" onClick={this.props.handleAll}>\n            All\n          </a>\n          <a href=\"#/active\" onClick={this.props.handleClick}>\n            Active\n          </a>\n          <a href=\"#/completed\" onClick={this.props.handleComplete}>\n            Completed\n          </a>\n        </div>\n        {clearButton}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\n\nimport ListFooter from \"./components/ListFooter.component\";\n\nvar enterKey = 13;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [],\n      value: \"\",\n      todoCount: 0,\n      active: false,\n      complete: false,\n      all: true\n    };\n  }\n\n  handleKeyDown = event => {\n    if (event.keyCode === enterKey) {\n      this.handleSubmit(event);\n    }\n  };\n\n  handleChange = event => {\n    this.setState({\n      value: event.target.value\n    });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    var todos = this.state.todos;\n    todos.push({ text: this.refs.newText.value, completed: false });\n    this.setState({\n      todos: todos,\n      value: \"\",\n      todoCount: this.state.todoCount + 1\n    });\n  };\n\n  handleClick = text => {\n    this.setState(prevState => {\n      const updatedTodos = prevState.todos.map(todo => {\n        if (todo.text === text) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      });\n      return {\n        todos: updatedTodos\n      };\n    });\n    this.changeAll();\n  };\n\n  changeAll = () => {\n    if (this.state.all) {\n      this.setState({\n        all: false\n      });\n    } else {\n      this.setState({\n        all: true\n      });\n    }\n  };\n\n  handleActive = () => {\n    this.setState({\n      active: true,\n      complete: false\n    });\n  };\n\n  handleAll = () => {\n    this.setState({\n      complete: false,\n      active: false\n    });\n  };\n\n  handleComplete = () => {\n    this.setState({\n      complete: true,\n      active: false\n    });\n  };\n\n  clearComplete = () => {\n    let clearData = this.state.todos.filter(todo => {\n      return todo.completed === false;\n    });\n    this.setState({\n      todos: clearData,\n      all: true\n    });\n  };\n\n  selectAll = () => {\n    if (this.state.all) {\n      this.setState(prevState => {\n        const selectData = prevState.todos.map(todo => {\n          todo.completed = true;\n\n          return todo;\n        });\n        return {\n          todos: selectData,\n          all: false\n        };\n      });\n    } else {\n      this.setState(prevState => {\n        const selectData = prevState.todos.map(todo => {\n          todo.completed = false;\n\n          return todo;\n        });\n        return {\n          todos: selectData,\n          all: true\n        };\n      });\n    }\n  };\n\n  destroy = todo => {\n    var destroy = this.state.todos.filter(candidate => {\n      return candidate !== todo;\n    });\n\n    setTimeout(\n      () =>\n        this.setState({\n          todos: destroy\n        }),\n      1\n    );\n  };\n\n  render() {\n    const completedStyle = {\n      color: \"#cdcdcd\",\n      textDecoration: \"line-through\"\n    };\n\n    const activeItemsData = this.state.todos.filter(todo => {\n      return todo.completed === false;\n    });\n    const activeItems = activeItemsData.map((todo, index) => {\n      return (\n        <div className=\"container\" key={index}>\n          <label className=\"checkbox-container\">\n            <p\n              style={todo.completed ? completedStyle : null}\n              className=\"todo-title\"\n            >\n              {todo.text}\n            </p>\n            <input\n              type=\"checkbox\"\n              onChange={() => this.handleClick(todo.text)}\n              checked={todo.completed}\n              className=\"newCheckbox\"\n            />\n            <span className=\"checkmark\" />\n            <button\n              className=\"destroyBtn\"\n              onClick={this.destroy.bind(this, todo)}\n            >\n              X\n            </button>\n          </label>\n        </div>\n      );\n    });\n\n    const completeItemsData = this.state.todos.filter(todo => {\n      return todo.completed === true;\n    });\n    const completeItems = completeItemsData.map((todo, index) => {\n      return (\n        <div className=\"container\" key={index}>\n          <label className=\"checkbox-container\">\n            <p\n              style={todo.completed ? completedStyle : null}\n              className=\"todo-title\"\n            >\n              {todo.text}\n            </p>\n            <input\n              type=\"checkbox\"\n              onChange={() => this.handleClick(todo.text)}\n              checked={todo.completed}\n              className=\"newCheckbox\"\n            />\n            <span className=\"checkmark\" />\n            <button\n              className=\"destroyBtn\"\n              onClick={this.destroy.bind(this, todo)}\n            >\n              X\n            </button>\n          </label>\n        </div>\n      );\n    });\n\n    const todoItems = this.state.todos.map((todo, index) => (\n      <div className=\"container\" key={index}>\n        <label className=\"checkbox-container\">\n          <p\n            style={todo.completed ? completedStyle : null}\n            className=\"todo-title\"\n          >\n            {todo.text}\n          </p>\n          <input\n            type=\"checkbox\"\n            onChange={() => this.handleClick(todo.text)}\n            checked={todo.completed}\n            className=\"newCheckbox\"\n          />\n          <span className=\"checkmark\" />\n          <button\n            className=\"destroyBtn\"\n            onClick={this.destroy.bind(this, todo)}\n          >\n            X\n          </button>\n        </label>\n      </div>\n    ));\n\n    return (\n      <div className=\"list\">\n        <h1 className=\"title\">to-do</h1>\n\n        <div className=\"todo-form\">\n          <input\n            id=\"todo-input\"\n            type=\"text\"\n            ref=\"newText\"\n            placeholder=\"What needs to be done?\"\n            onChange={this.handleChange}\n            value={this.state.value}\n            onKeyDown={this.handleKeyDown}\n          />\n          {this.state.todos.length ? (\n            <label className=\"arrow-container\">\n              <input\n                type=\"checkbox\"\n                onChange={this.selectAll}\n                className=\"select-all\"\n                checked={activeItemsData.length === 0}\n              />\n              <span className=\"arrow-checkmark\"></span>\n            </label>\n          ) : null}\n        </div>\n        {this.state.active\n          ? activeItems\n          : this.state.complete\n          ? completeItems\n          : todoItems}\n        {this.state.todos.length > 0 ? (\n          <ListFooter\n            activeNumber={activeItemsData.length}\n            completedNumber={completeItemsData.length}\n            handleClick={this.handleActive}\n            handleAll={this.handleAll}\n            handleComplete={this.handleComplete}\n            handleClear={this.clearComplete}\n          />\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}