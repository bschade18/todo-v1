{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","todos","value","todoCount","active","complete","all","handleSubmit","bind","handleChange","handleActive","handleAll","handleComplete","clearComplete","handleKeyDown","selectAll","destroy","event","keyCode","this","setState","target","preventDefault","push","text","refs","newText","completed","prevState","map","todo","changeAll","clearData","filter","candidate","console","log","setTimeout","completedStyle","color","textDecoration","activeItemsData","activeItems","className","style","type","onChange","handleClick","checked","onClick","completeItemsData","completeItems","todoItems","id","ref","placeholder","onKeyDown","length","activeNumber","completedNumber","handleClear","React","Component","ListFooter","itemsLeft","clearButton","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d0e9f173.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nvar enterKey = 13;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [],\n      value: \"\",\n      todoCount: 0,\n      active: false,\n      complete: false,\n      all: true\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleActive = this.handleActive.bind(this);\n    this.handleAll = this.handleAll.bind(this);\n    this.handleComplete = this.handleComplete.bind(this);\n    this.clearComplete = this.clearComplete.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.selectAll = this.selectAll.bind(this);\n    this.destroy = this.destroy.bind(this);\n  }\n\n  handleKeyDown(event) {\n    if (event.keyCode === enterKey) {\n      this.handleSubmit(event);\n    }\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    var todos = this.state.todos;\n    todos.push({ text: this.refs.newText.value, completed: false });\n    this.setState({\n      todos: todos,\n      value: \"\",\n      todoCount: this.state.todoCount + 1\n    });\n  }\n\n  handleClick(text) {\n    this.setState(prevState => {\n      const updatedTodos = prevState.todos.map(todo => {\n        if (todo.text === text) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      });\n      return {\n        todos: updatedTodos\n      };\n    });\n    this.changeAll();\n  }\n\n  changeAll() {\n    if (this.state.all) {\n      this.setState({\n        all: false\n      });\n    } else {\n      this.setState({\n        all: true\n      });\n    }\n  }\n\n  handleActive() {\n    this.setState({\n      active: true,\n      complete: false\n    });\n  }\n\n  handleAll() {\n    this.setState({\n      complete: false,\n      active: false\n    });\n  }\n\n  handleComplete() {\n    this.setState({\n      complete: true,\n      active: false\n    });\n  }\n\n  clearComplete() {\n    let clearData = this.state.todos.filter(todo => {\n      return todo.completed === false;\n    });\n    this.setState({\n      todos: clearData,\n      all: true\n    });\n  }\n\n  selectAll() {\n    if (this.state.all) {\n      this.setState(prevState => {\n        const selectData = prevState.todos.map(todo => {\n          todo.completed = true;\n\n          return todo;\n        });\n        return {\n          todos: selectData,\n          all: false\n        };\n      });\n    } else {\n      this.setState(prevState => {\n        const selectData = prevState.todos.map(todo => {\n          todo.completed = false;\n\n          return todo;\n        });\n        return {\n          todos: selectData,\n          all: true\n        };\n      });\n    }\n  }\n\n  destroy(todo) {\n    var destroy = this.state.todos.filter(candidate => {\n      return candidate !== todo;\n    });\n    console.log(destroy);\n\n    setTimeout(\n      () =>\n        this.setState({\n          todos: destroy\n        }),\n      1\n    );\n  }\n\n  render() {\n    const completedStyle = {\n      color: \"#cdcdcd\",\n      textDecoration: \"line-through\"\n    };\n\n    const activeItemsData = this.state.todos.filter(todo => {\n      return todo.completed === false;\n    });\n    const activeItems = activeItemsData.map(todo => {\n      return (\n        <div className=\"container\">\n          <label className=\"checkbox-container\">\n            <p\n              style={todo.completed ? completedStyle : null}\n              className=\"todo-title\"\n            >\n              {todo.text}\n            </p>\n            <input\n              type=\"checkbox\"\n              onChange={() => this.handleClick(todo.text)}\n              checked={todo.completed}\n              className=\"newCheckbox\"\n            />\n            <span className=\"checkmark\" />\n            <button\n              className=\"destroyBtn\"\n              onClick={this.destroy.bind(this, todo)}\n            >\n              X\n            </button>\n          </label>\n        </div>\n      );\n    });\n\n    const completeItemsData = this.state.todos.filter(todo => {\n      return todo.completed === true;\n    });\n    const completeItems = completeItemsData.map(todo => {\n      return (\n        <div className=\"container\">\n          <label className=\"checkbox-container\">\n            <p\n              style={todo.completed ? completedStyle : null}\n              className=\"todo-title\"\n            >\n              {todo.text}\n            </p>\n            <input\n              type=\"checkbox\"\n              onChange={() => this.handleClick(todo.text)}\n              checked={todo.completed}\n              className=\"newCheckbox\"\n            />\n            <span className=\"checkmark\" />\n            <button\n              className=\"destroyBtn\"\n              onClick={this.destroy.bind(this, todo)}\n            >\n              X\n            </button>\n          </label>\n        </div>\n      );\n    });\n\n    const todoItems = this.state.todos.map(todo => (\n      <div className=\"container\">\n        <label className=\"checkbox-container\">\n          <p\n            style={todo.completed ? completedStyle : null}\n            className=\"todo-title\"\n          >\n            {todo.text}\n          </p>\n          <input\n            type=\"checkbox\"\n            onChange={() => this.handleClick(todo.text)}\n            checked={todo.completed}\n            className=\"newCheckbox\"\n          />\n          <span className=\"checkmark\" />\n          <button\n            className=\"destroyBtn\"\n            onClick={this.destroy.bind(this, todo)}\n          >\n            X\n          </button>\n        </label>\n      </div>\n    ));\n\n    return (\n      <div className=\"list\">\n        <h1 className=\"title\">to-do</h1>\n\n        <div className=\"todo-form\">\n          <input\n            id=\"todo-input\"\n            type=\"text\"\n            ref=\"newText\"\n            placeholder=\"What needs to be done?\"\n            onChange={this.handleChange}\n            value={this.state.value}\n            onKeyDown={this.handleKeyDown}\n          />\n          {this.state.todos.length ? (\n            <input\n              type=\"checkbox\"\n              onChange={this.selectAll}\n              className=\"select-all\"\n              checked={activeItemsData.length === 0}\n            />\n          ) : null}\n        </div>\n        {this.state.active\n          ? activeItems\n          : this.state.complete\n          ? completeItems\n          : todoItems}\n        {this.state.todos.length > 0 ? (\n          <ListFooter\n            activeNumber={activeItemsData.length}\n            completedNumber={completeItemsData.length}\n            handleClick={this.handleActive}\n            handleAll={this.handleAll}\n            handleComplete={this.handleComplete}\n            handleClear={this.clearComplete}\n          />\n        ) : null}\n      </div>\n    );\n  }\n}\n\nclass ListFooter extends React.Component {\n  render() {\n    var clearButton = null;\n    if (this.props.completedNumber > 0) {\n      clearButton = (\n        <button className=\"clear-completed\" onClick={this.props.handleClear}>\n          Clear Completed\n        </button>\n      );\n    }\n\n    var itemsLeft;\n    if (this.props.activeNumber !== 1) {\n      itemsLeft = (\n        <p id=\"todo-number-display\">{this.props.activeNumber} items left</p>\n      );\n    } else {\n      itemsLeft = (\n        <p id=\"todo-number-display\">{this.props.activeNumber} item left</p>\n      );\n    }\n\n    return (\n      <div className=\"list-footer\">\n        {itemsLeft}\n        <div className=\"toggleButtons\">\n          <a href=\"#\" onClick={this.props.handleAll}>\n            All\n          </a>\n          <a href=\"#\" onClick={this.props.handleClick}>\n            Active\n          </a>\n          <a href=\"#\" onClick={this.props.handleComplete}>\n            Completed\n          </a>\n        </div>\n        {clearButton}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}