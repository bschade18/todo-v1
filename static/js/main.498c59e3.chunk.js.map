{"version":3,"sources":["components/Todo.component.js","components/ListFooter.component.js","components/TodoForm.js","App.js","serviceWorker.js","reducers/todoReducer.js","reducers/index.js","actions/types.js","store.js","index.js"],"names":["Todo","props","className","key","index","style","todo","completed","color","textDecoration","text","type","onChange","handleClick","checked","onClick","delete","bind","ListFooter","itemsLeft","clearButton","this","completedNumber","handleClear","activeNumber","id","href","handleAll","handleActive","handleComplete","React","Component","TodoForm","placeholder","handleChange","value","onKeyDown","handleKeyDown","todos","length","selectAll","activeTodosList","App","event","keyCode","handleSubmit","preventDefault","state","todoCount","push","setState","target","todosList","map","currenttodo","completeTodosList","filter","prevState","changeAll","all","active","complete","clearComplete","clearData","deletedList","candidate","setTimeout","Boolean","window","location","hostname","match","initialState","combineReducers","action","createStore","rootReducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.498c59e3.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Todo = props => {\n  const completedStyle = {\n    color: \"#cdcdcd\",\n    textDecoration: \"line-through\"\n  };\n\n  return (\n    <div className=\"container\" key={props.index}>\n      <label className=\"checkbox-container\">\n        <p\n          style={props.todo.completed ? completedStyle : null}\n          className=\"todo-title\"\n        >\n          {props.todo.text}\n        </p>\n        <input\n          type=\"checkbox\"\n          onChange={() => props.handleClick(props.todo.text)}\n          checked={props.todo.completed}\n          className=\"newCheckbox\"\n        />\n        <span className=\"checkmark\" />\n        <button\n          className=\"deleteBtn\"\n          onClick={props.delete.bind(this, props.todo)}\n        >\n          X\n        </button>\n      </label>\n    </div>\n  );\n};\n\nexport default Todo;\n","import React from \"react\";\n\nexport default class ListFooter extends React.Component {\n  render() {\n    var clearButton = null;\n    if (this.props.completedNumber > 0) {\n      clearButton = (\n        <button className=\"clear-completed\" onClick={this.props.handleClear}>\n          Clear Completed\n        </button>\n      );\n    }\n\n    var itemsLeft;\n    if (this.props.activeNumber !== 1) {\n      itemsLeft = (\n        <p id=\"todo-number-display\">{this.props.activeNumber} items left</p>\n      );\n    } else {\n      itemsLeft = (\n        <p id=\"todo-number-display\">{this.props.activeNumber} item left</p>\n      );\n    }\n\n    return (\n      <div className=\"list-footer\">\n        {itemsLeft}\n        <div className=\"toggleButtons\">\n          <a href=\"#/all\" onClick={this.props.handleAll}>\n            All\n          </a>\n          <a href=\"#/active\" onClick={this.props.handleActive}>\n            Active\n          </a>\n          <a href=\"#/completed\" onClick={this.props.handleComplete}>\n            Completed\n          </a>\n        </div>\n        {clearButton}\n      </div>\n    );\n  }\n}\n","import React, { Fragment } from \"react\";\n\nconst TodoForm = props => {\n  return (\n    <Fragment>\n      <h1 className=\"title\">to-do</h1>\n\n      <div className=\"todo-form\">\n        <input\n          id=\"todo-input\"\n          type=\"text\"\n          placeholder=\"What needs to be done?\"\n          onChange={props.handleChange}\n          value={props.todo}\n          onKeyDown={props.handleKeyDown}\n        />\n        {props.todos.length ? (\n          <label className=\"arrow-container\">\n            <input\n              type=\"checkbox\"\n              onChange={props.selectAll}\n              className=\"select-all\"\n              checked={props.activeTodosList().length === 0}\n            />\n            <span className=\"arrow-checkmark\"></span>\n          </label>\n        ) : null}\n      </div>\n    </Fragment>\n  );\n};\n\nexport default TodoForm;\n","import React from \"react\";\nimport \"./App.css\";\nimport Todo from \"./components/Todo.component\";\n\nimport ListFooter from \"./components/ListFooter.component\";\nimport TodoFrom from \"./components/TodoForm\";\nimport TodoForm from \"./components/TodoForm\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [],\n      todo: \"\",\n      todoCount: 0,\n      active: false,\n      complete: false,\n      all: true\n    };\n  }\n\n  handleKeyDown = event => {\n    const enterKey = 13;\n    if (event.keyCode === enterKey) {\n      this.handleSubmit(event);\n    }\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    const { todos, todo, todoCount } = this.state;\n    todos.push({ text: todo, completed: false });\n    this.setState({\n      todos,\n      todo: \"\",\n      todoCount: todoCount + 1\n    });\n  };\n\n  handleChange = event => {\n    this.setState({\n      todo: event.target.value\n    });\n  };\n\n  todosList = () => {\n    return this.state.todos.map((currenttodo, index) => {\n      return (\n        <Todo\n          todo={currenttodo}\n          key={index}\n          delete={this.delete}\n          handleClick={this.handleClick}\n        />\n      );\n    });\n  };\n\n  completeTodosList = () => {\n    const completedTodos = this.state.todos.filter(todo => {\n      return todo.completed === true;\n    });\n\n    return completedTodos.map((todo, index) => {\n      return (\n        <Todo\n          todo={todo}\n          key={index}\n          delete={this.delete}\n          handleClick={this.handleClick}\n        />\n      );\n    });\n  };\n\n  activeTodosList = () => {\n    const activeTodos = this.state.todos.filter(todo => {\n      return todo.completed === false;\n    });\n\n    return activeTodos.map((todo, index) => {\n      return (\n        <Todo\n          todo={todo}\n          key={index}\n          delete={this.delete}\n          handleClick={this.handleClick}\n        />\n      );\n    });\n  };\n\n  handleClick = text => {\n    this.setState(prevState => {\n      const updatedTodos = prevState.todos.map(todo => {\n        if (todo.text === text) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      });\n      return {\n        todos: updatedTodos\n      };\n    });\n    this.changeAll();\n  };\n\n  changeAll = () => {\n    if (this.state.all) {\n      this.setState({\n        all: false\n      });\n    } else {\n      this.setState({\n        all: true\n      });\n    }\n  };\n\n  handleActive = () => {\n    this.setState({\n      active: true,\n      complete: false\n    });\n  };\n\n  handleAll = () => {\n    this.setState({\n      complete: false,\n      active: false\n    });\n  };\n\n  handleComplete = () => {\n    this.setState({\n      complete: true,\n      active: false\n    });\n  };\n\n  clearComplete = () => {\n    let clearData = this.state.todos.filter(todo => {\n      return todo.completed === false;\n    });\n    this.setState({\n      todos: clearData,\n      all: true\n    });\n  };\n\n  selectAll = () => {\n    if (this.state.all) {\n      this.setState(prevState => {\n        const selectData = prevState.todos.map(todo => {\n          todo.completed = true;\n\n          return todo;\n        });\n        return {\n          todos: selectData,\n          all: false\n        };\n      });\n    } else {\n      this.setState(prevState => {\n        const selectData = prevState.todos.map(todo => {\n          todo.completed = false;\n\n          return todo;\n        });\n        return {\n          todos: selectData,\n          all: true\n        };\n      });\n    }\n  };\n\n  delete = todo => {\n    var deletedList = this.state.todos.filter(candidate => {\n      return candidate !== todo;\n    });\n\n    setTimeout(\n      () =>\n        this.setState({\n          todos: deletedList\n        }),\n      1\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"list\">\n        <TodoForm\n          handleChange={this.handleChange}\n          todo={this.state.todo}\n          handleKeyDown={this.handleKeyDown}\n          selectAll={this.selectAll}\n          activeTodosList={this.activeTodosList}\n          todos={this.state.todos}\n        />\n        {this.state.active\n          ? this.activeTodosList()\n          : this.state.complete\n          ? this.completeTodosList()\n          : this.todosList()}\n        {this.state.todos.length > 0 ? (\n          <ListFooter\n            activeNumber={this.activeTodosList().length}\n            completedNumber={this.completeTodosList().length}\n            handleActive={this.handleActive}\n            handleAll={this.handleAll}\n            handleComplete={this.handleComplete}\n            handleClear={this.clearComplete}\n          />\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { GET_TODOS, ADD_TODOS, DELETE_TODOS } from \"../actions/types\";\n\nconst initialState = {\n  todos: [],\n  value: \"\",\n  todoCount: 0,\n  active: false,\n  complete: false,\n  all: true\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_TODOS:\n      return {\n        ...state\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport todoReducer from \"./todoReducer\";\n\nexport default combineReducers({\n  todo: todoReducer\n});\n","export const GET_TODOS = \"GET_TODOS\";\nexport const ADD_TODOS = \"GET_TODOS\";\nexport const DELETE_TODOS = \"GET_TODOS\";\n","import { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nconst initialState = {};\n\nconst store = createStore(rootReducer, initialState);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}