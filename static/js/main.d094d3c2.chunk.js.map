{"version":3,"sources":["components/Todo.component.js","components/ListFooter.component.js","components/TodoForm.js","App.js","actions/todoActions.js","actions/types.js","serviceWorker.js","reducers/todoReducer.js","reducers/index.js","store.js","index.js"],"names":["Todo","props","className","key","index","style","todo","completed","color","textDecoration","text","type","onChange","handleClick","checked","onClick","delete","bind","ListFooter","itemsLeft","clearButton","this","completedNumber","handleClear","activeNumber","id","href","handleAll","handleActive","handleComplete","React","Component","connect","state","todos","placeholder","handleChange","value","onKeyDown","handleKeyDown","length","selectAll","activeTodosList","App","event","keyCode","handleSubmit","preventDefault","todoCount","push","localStorage","setItem","JSON","stringify","addTodo","setState","target","todosList","map","currenttodo","completeTodosList","filter","updatedTodos","clickBox","changeAll","showAll","showActive","showComplete","clearComplete","clearData","selectData","checkAll","uncheckAll","deletedList","candidate","deleteTodo","getItem","loadTodos","parse","getTodos","dispatch","payload","Boolean","window","location","hostname","match","initialState","combineReducers","action","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d094d3c2.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Todo = props => {\n  const completedStyle = {\n    color: \"#cdcdcd\",\n    textDecoration: \"line-through\"\n  };\n\n  return (\n    <div className=\"container\" key={props.index}>\n      <label className=\"checkbox-container\">\n        <p\n          style={props.todo.completed ? completedStyle : null}\n          className=\"todo-title\"\n        >\n          {props.todo.text}\n        </p>\n        <input\n          type=\"checkbox\"\n          onChange={() => props.handleClick(props.todo.text)}\n          checked={props.todo.completed}\n          className=\"newCheckbox\"\n        />\n        <span className=\"checkmark\" />\n        <button\n          className=\"deleteBtn\"\n          onClick={props.delete.bind(this, props.todo)}\n        >\n          X\n        </button>\n      </label>\n    </div>\n  );\n};\n\nexport default Todo;\n","import React from \"react\";\n\nclass ListFooter extends React.Component {\n  render() {\n    var clearButton = null;\n    if (this.props.completedNumber > 0) {\n      clearButton = (\n        <button className=\"clear-completed\" onClick={this.props.handleClear}>\n          Clear Completed\n        </button>\n      );\n    }\n\n    var itemsLeft;\n    if (this.props.activeNumber !== 1) {\n      itemsLeft = (\n        <p id=\"todo-number-display\">{this.props.activeNumber} items left</p>\n      );\n    } else {\n      itemsLeft = (\n        <p id=\"todo-number-display\">{this.props.activeNumber} item left</p>\n      );\n    }\n\n    return (\n      <div className=\"list-footer\">\n        {itemsLeft}\n        <div className=\"toggleButtons\">\n          <a href=\"#/all\" onClick={this.props.handleAll}>\n            All\n          </a>\n          <a href=\"#/active\" onClick={this.props.handleActive}>\n            Active\n          </a>\n          <a href=\"#/completed\" onClick={this.props.handleComplete}>\n            Completed\n          </a>\n        </div>\n        {clearButton}\n      </div>\n    );\n  }\n}\n\nexport default ListFooter;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nconst TodoForm = props => {\n  return (\n    <Fragment>\n      <h1 className=\"title\">to-do</h1>\n\n      <div className=\"todo-form\">\n        <input\n          id=\"todo-input\"\n          type=\"text\"\n          placeholder=\"What needs to be done?\"\n          onChange={props.handleChange}\n          value={props.todo}\n          onKeyDown={props.handleKeyDown}\n        />\n        {props.todos.length ? (\n          <label className=\"arrow-container\">\n            <input\n              type=\"checkbox\"\n              onChange={props.selectAll}\n              className=\"select-all\"\n              checked={props.activeTodosList().length === 0}\n            />\n            <span className=\"arrow-checkmark\"></span>\n          </label>\n        ) : null}\n      </div>\n    </Fragment>\n  );\n};\n\nTodoForm.propTypes = {\n  todos: PropTypes.array.isRequired\n};\n\nconst mapStateToProps = state => ({\n  todos: state.todo.todos\n});\n\nexport default connect(mapStateToProps, {})(TodoForm);\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Todo from \"./components/Todo.component\";\nimport ListFooter from \"./components/ListFooter.component\";\nimport TodoForm from \"./components/TodoForm\";\nimport PropTypes from \"prop-types\";\n\nimport { connect } from \"react-redux\";\nimport {\n  addTodo,\n  getTodos,\n  deleteTodo,\n  clearComplete,\n  clickBox,\n  checkAll,\n  uncheckAll\n} from \"./actions/todoActions\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [],\n      todo: \"\",\n      todoCount: 0,\n      showActive: false,\n      showComplete: false,\n      showAll: true\n    };\n  }\n\n  componentDidMount() {\n    const todos = localStorage.getItem(\"todos\");\n    if (todos) {\n      const loadTodos = JSON.parse(todos);\n\n      this.props.getTodos(loadTodos);\n    }\n  }\n\n  handleKeyDown = event => {\n    const enterKey = 13;\n    if (event.keyCode === enterKey) {\n      this.handleSubmit(event);\n    }\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const { todo, todoCount } = this.state;\n    const { todos } = this.props;\n\n    todos.push({ text: todo, completed: false });\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n\n    this.props.addTodo(todos);\n\n    this.setState({\n      todo: \"\",\n      todoCount: todoCount + 1\n    });\n  };\n\n  handleChange = event => {\n    this.setState({\n      todo: event.target.value\n    });\n  };\n\n  todosList = () => {\n    return this.props.todos.map((currenttodo, index) => {\n      return (\n        <Todo\n          todo={currenttodo}\n          key={index}\n          delete={this.delete}\n          handleClick={this.handleClick}\n        />\n      );\n    });\n  };\n\n  completeTodosList = () => {\n    const completedTodos = this.props.todos.filter(todo => {\n      return todo.completed === true;\n    });\n\n    return completedTodos.map((todo, index) => {\n      return (\n        <Todo\n          todo={todo}\n          key={index}\n          delete={this.delete}\n          handleClick={this.handleClick}\n        />\n      );\n    });\n  };\n\n  activeTodosList = () => {\n    const activeTodos = this.props.todos.filter(todo => {\n      return todo.completed === false;\n    });\n\n    return activeTodos.map((todo, index) => {\n      return (\n        <Todo\n          todo={todo}\n          key={index}\n          delete={this.delete}\n          handleClick={this.handleClick}\n        />\n      );\n    });\n  };\n\n  handleClick = text => {\n    const updatedTodos = this.props.todos.map(todo => {\n      if (todo.text === text) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    });\n\n    this.props.clickBox(updatedTodos);\n\n    this.changeAll();\n  };\n\n  changeAll = () => {\n    this.setState({\n      showAll: !this.state.showAll\n    });\n  };\n\n  handleActive = () => {\n    this.setState({\n      showActive: true,\n      showComplete: false\n    });\n  };\n\n  handleAll = () => {\n    this.setState({\n      showComplete: false,\n      showActive: false\n    });\n  };\n\n  handleComplete = () => {\n    this.setState({\n      showComplete: true,\n      showActive: false\n    });\n  };\n\n  clearComplete = () => {\n    let clearData = this.props.todos.filter(todo => {\n      return todo.completed === false;\n    });\n    localStorage.setItem(\"todos\", JSON.stringify(clearData));\n\n    this.setState({\n      showAll: true\n    });\n\n    this.props.clearComplete(clearData);\n  };\n\n  selectAll = () => {\n    if (this.state.showAll) {\n      const selectData = this.props.todos.map(todo => {\n        todo.completed = true;\n\n        return todo;\n      });\n      this.setState({\n        showAll: false\n      });\n      this.props.checkAll(selectData);\n    } else {\n      const selectData = this.props.todos.map(todo => {\n        todo.completed = false;\n\n        return todo;\n      });\n      this.setState({\n        showAll: true\n      });\n      this.props.uncheckAll(selectData);\n    }\n  };\n\n  delete = todo => {\n    var deletedList = this.props.todos.filter(candidate => {\n      return candidate !== todo;\n    });\n\n    localStorage.setItem(\"todos\", JSON.stringify(deletedList));\n\n    this.props.deleteTodo(deletedList);\n  };\n\n  render() {\n    return (\n      <div className=\"list\">\n        <TodoForm\n          handleChange={this.handleChange}\n          todo={this.state.todo}\n          handleKeyDown={this.handleKeyDown}\n          selectAll={this.selectAll}\n          activeTodosList={this.activeTodosList}\n          todos={this.state.todos}\n        />\n        {this.state.showActive\n          ? this.activeTodosList()\n          : this.state.showComplete\n          ? this.completeTodosList()\n          : this.todosList()}\n        {this.props.todos.length > 0 ? (\n          <ListFooter\n            activeNumber={this.activeTodosList().length}\n            completedNumber={this.completeTodosList().length}\n            handleActive={this.handleActive}\n            handleAll={this.handleAll}\n            handleComplete={this.handleComplete}\n            handleClear={this.clearComplete}\n          />\n        ) : null}\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  todos: PropTypes.array.isRequired\n};\n\nconst mapStateToProps = state => ({\n  todos: state.todo.todos\n});\n\nexport default connect(mapStateToProps, {\n  addTodo,\n  getTodos,\n  deleteTodo,\n  clearComplete,\n  clickBox,\n  checkAll,\n  uncheckAll\n})(App);\n","import {\n  GET_TODOS,\n  ADD_TODO,\n  DELETE_TODO,\n  CLEAR_COMPLETE,\n  CLICK_BOX,\n  CHECK_ALL,\n  UNCHECK_ALL\n} from \"./types\";\n\nexport const getTodos = todos => dispatch => {\n  dispatch({\n    type: GET_TODOS,\n    payload: todos\n  });\n};\n\nexport const addTodo = todos => dispatch => {\n  dispatch({\n    type: ADD_TODO,\n    payload: todos\n  });\n};\n\nexport const deleteTodo = todos => dispatch => {\n  dispatch({\n    type: DELETE_TODO,\n    payload: todos\n  });\n};\n\nexport const clearComplete = todos => dispatch => {\n  dispatch({\n    type: CLEAR_COMPLETE,\n    payload: todos\n  });\n};\n\nexport const clickBox = todos => dispatch => {\n  dispatch({\n    type: CLICK_BOX,\n    payload: todos\n  });\n};\n\nexport const checkAll = todos => dispatch => {\n  dispatch({\n    type: CHECK_ALL,\n    payload: todos\n  });\n};\n\nexport const uncheckAll = todos => dispatch => {\n  dispatch({\n    type: UNCHECK_ALL,\n    payload: todos\n  });\n};\n","export const GET_TODOS = \"GET_TODOS\";\nexport const ADD_TODO = \"ADD_TODO\";\nexport const DELETE_TODO = \"DELETE_TODO\";\nexport const CLEAR_COMPLETE = \"CLEAR_COMPLETE\";\nexport const CLICK_BOX = \"CLICK_BOX\";\nexport const CHECK_ALL = \"CHECK_ALL\";\nexport const UNCHECK_ALL = \"UNCHECK_ALL\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  GET_TODOS,\n  ADD_TODO,\n  DELETE_TODO,\n  CLICK_BOX,\n  CLEAR_COMPLETE,\n  CHECK_ALL,\n  UNCHECK_ALL\n} from \"../actions/types\";\n\nconst initialState = {\n  todos: []\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case CHECK_ALL:\n    case UNCHECK_ALL:\n    case CLEAR_COMPLETE:\n    case DELETE_TODO:\n    case ADD_TODO:\n    case GET_TODOS:\n    case CLICK_BOX:\n      return {\n        ...state,\n        todos: action.payload\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport todoReducer from \"./todoReducer\";\n\nexport default combineReducers({\n  todo: todoReducer\n});\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport rootReducer from \"./reducers\";\nimport thunk from \"redux-thunk\";\n\nconst initialState = {};\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  compose(\n    applyMiddleware(...middleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}