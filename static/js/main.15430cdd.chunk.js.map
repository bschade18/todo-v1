{"version":3,"sources":["components/Todo.js","components/ListFooter.js","components/TodoForm.js","actions/todoActions.js","actions/types.js","App.js","serviceWorker.js","reducers/todoReducer.js","reducers/index.js","store.js","index.js"],"names":["Todo","todo","index","handleClick","destroy","className","key","style","completed","color","textDecoration","text","type","onChange","checked","onClick","ListFooter","completedNumber","handleClear","activeNumber","handleAll","handleActive","handleComplete","clearButton","itemsLeft","id","href","connect","state","todos","handleChange","handleKeyDown","activeTodosList","selectAll","placeholder","value","onKeyDown","length","checkAll","dispatch","payload","addTodo","getTodos","deleteTodo","clearComplete","clickBox","uncheckAll","useState","setTodo","todoCount","setTodoCount","showActive","setShowActive","showComplete","setShowComplete","showAll","setShowAll","useEffect","localStorage","getItem","loadTodos","JSON","parse","handleSubmit","event","preventDefault","push","setItem","stringify","completeTodosList","filter","map","updatedTodos","changeAll","deletedList","candidate","e","target","keyCode","selectData","currenttodo","clearData","Boolean","window","location","hostname","match","initialState","combineReducers","action","middleware","thunk","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.15430cdd.chunk.js","sourcesContent":["import React from 'react';\n\nconst Todo = ({ todo, index, handleClick, destroy }) => {\n  const completedStyle = {\n    color: '#cdcdcd',\n    textDecoration: 'line-through',\n  };\n\n  return (\n    <div className=\"container\" key={index}>\n      <label className=\"checkbox-container\">\n        <p\n          style={todo.completed ? completedStyle : null}\n          className=\"todo-title\"\n        >\n          {todo.text}\n        </p>\n        <input\n          type=\"checkbox\"\n          onChange={() => handleClick(todo.text)}\n          checked={todo.completed}\n          className=\"newCheckbox\"\n        />\n        <span className=\"checkmark\" />\n        <button className=\"deleteBtn\" onClick={() => destroy(todo)}>\n          X\n        </button>\n      </label>\n    </div>\n  );\n};\n\nexport default Todo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ListFooter = ({\n  completedNumber,\n  handleClear,\n  activeNumber,\n  handleAll,\n  handleActive,\n  handleComplete,\n}) => {\n  let clearButton = null;\n  if (completedNumber > 0) {\n    clearButton = (\n      <button className=\"clear-completed\" onClick={handleClear}>\n        Clear Completed\n      </button>\n    );\n  }\n\n  let itemsLeft = (\n    <p id=\"todo-number-display\">\n      {activeNumber} item{activeNumber > 1 ? 's' : ''} left\n    </p>\n  );\n\n  return (\n    <div className=\"list-footer\">\n      {itemsLeft}\n      <div className=\"toggleButtons\">\n        <a id=\"all\" href=\"#/all\" onClick={handleAll}>\n          All\n        </a>\n        <a href=\"#/active\" onClick={handleActive}>\n          Active\n        </a>\n        <a href=\"#/completed\" onClick={handleComplete}>\n          Completed\n        </a>\n      </div>\n      {clearButton}\n    </div>\n  );\n};\n\nListFooter.propTypes = {\n  completedNumber: PropTypes.number.isRequired,\n  activeNumber: PropTypes.number.isRequired,\n  handleClear: PropTypes.func.isRequired,\n  handleAll: PropTypes.func.isRequired,\n  handleActive: PropTypes.func.isRequired,\n  handleComplete: PropTypes.func.isRequired,\n};\n\nexport default ListFooter;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nconst TodoForm = ({\n  handleChange,\n  handleKeyDown,\n  activeTodosList,\n  todos,\n  todo,\n  selectAll,\n}) => {\n  return (\n    <Fragment>\n      <h1 className=\"title\">to-do</h1>\n\n      <div className=\"todo-form\">\n        <input\n          id=\"todo-input\"\n          type=\"text\"\n          placeholder=\"What needs to be done?\"\n          onChange={handleChange}\n          value={todo}\n          onKeyDown={handleKeyDown}\n        />\n        {todos[0] && (\n          <label className=\"arrow-container\">\n            <input\n              type=\"checkbox\"\n              onChange={selectAll}\n              className=\"select-all\"\n              checked={activeTodosList().length === 0}\n            />\n            <span className=\"arrow-checkmark\"></span>\n          </label>\n        )}\n      </div>\n    </Fragment>\n  );\n};\n\nTodoForm.propTypes = {\n  todos: PropTypes.array.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  todos: state.todo.todos,\n});\n\nexport default connect(mapStateToProps, {})(TodoForm);\n","import {\n  GET_TODOS,\n  ADD_TODO,\n  DELETE_TODO,\n  CLEAR_COMPLETE,\n  CLICK_BOX,\n  CHECK_ALL,\n  UNCHECK_ALL\n} from \"./types\";\n\nexport const getTodos = todos => dispatch => {\n  dispatch({\n    type: GET_TODOS,\n    payload: todos\n  });\n};\n\nexport const addTodo = todos => dispatch => {\n  dispatch({\n    type: ADD_TODO,\n    payload: todos\n  });\n};\n\nexport const deleteTodo = todos => dispatch => {\n  dispatch({\n    type: DELETE_TODO,\n    payload: todos\n  });\n};\n\nexport const clearComplete = todos => dispatch => {\n  dispatch({\n    type: CLEAR_COMPLETE,\n    payload: todos\n  });\n};\n\nexport const clickBox = todos => dispatch => {\n  dispatch({\n    type: CLICK_BOX,\n    payload: todos\n  });\n};\n\nexport const checkAll = todos => dispatch => {\n  dispatch({\n    type: CHECK_ALL,\n    payload: todos\n  });\n};\n\nexport const uncheckAll = todos => dispatch => {\n  dispatch({\n    type: UNCHECK_ALL,\n    payload: todos\n  });\n};\n","export const GET_TODOS = \"GET_TODOS\";\nexport const ADD_TODO = \"ADD_TODO\";\nexport const DELETE_TODO = \"DELETE_TODO\";\nexport const CLEAR_COMPLETE = \"CLEAR_COMPLETE\";\nexport const CLICK_BOX = \"CLICK_BOX\";\nexport const CHECK_ALL = \"CHECK_ALL\";\nexport const UNCHECK_ALL = \"UNCHECK_ALL\";\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nimport Todo from './components/Todo';\nimport ListFooter from './components/ListFooter';\nimport TodoForm from './components/TodoForm';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport {\n  addTodo,\n  getTodos,\n  deleteTodo,\n  clearComplete,\n  clickBox,\n  checkAll,\n  uncheckAll,\n} from './actions/todoActions';\n\nconst App = ({\n  getTodos,\n  todos,\n  addTodo,\n  clickBox,\n  clearComplete,\n  uncheckAll,\n  deleteTodo,\n}) => {\n  const [todo, setTodo] = useState('');\n  const [todoCount, setTodoCount] = useState(0);\n  const [showActive, setShowActive] = useState(false);\n  const [showComplete, setShowComplete] = useState(false);\n  const [showAll, setShowAll] = useState(true);\n\n  useEffect(() => {\n    const todos = localStorage.getItem('todos');\n    if (todos) {\n      const loadTodos = JSON.parse(todos);\n\n      getTodos(loadTodos);\n    }\n  }, []);\n\n  const handleKeyDown = (event) => {\n    const enterKey = 13;\n    if (event.keyCode === enterKey) {\n      handleSubmit(event);\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    todos.push({ text: todo, completed: false });\n    localStorage.setItem('todos', JSON.stringify(todos));\n\n    addTodo(todos);\n\n    setTodo('');\n    setTodoCount(todoCount + 1);\n  };\n\n  const handleChange = (e) => setTodo(e.target.value);\n\n  const todosList = () => {\n    return todos.map((currenttodo, index) => {\n      return (\n        <Todo\n          todo={currenttodo}\n          key={index}\n          destroy={destroy}\n          handleClick={handleClick}\n        />\n      );\n    });\n  };\n\n  const completeTodosList = () => {\n    const completedTodos = todos.filter((todo) => {\n      return todo.completed === true;\n    });\n\n    return completedTodos.map((todo, index) => {\n      return (\n        <Todo\n          todo={todo}\n          key={index}\n          destroy={destroy}\n          handleClick={handleClick}\n        />\n      );\n    });\n  };\n\n  const activeTodosList = () => {\n    const activeTodos = todos.filter((todo) => {\n      return todo.completed === false;\n    });\n\n    return activeTodos.map((todo, index) => {\n      return (\n        <Todo\n          todo={todo}\n          key={index}\n          destroy={destroy}\n          handleClick={handleClick}\n        />\n      );\n    });\n  };\n\n  const handleClick = (text) => {\n    const updatedTodos = todos.map((todo) => {\n      if (todo.text === text) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    });\n\n    clickBox(updatedTodos);\n\n    changeAll();\n  };\n\n  const changeAll = () => {\n    setShowAll(!showAll);\n  };\n\n  const handleActive = () => {\n    setShowActive(true);\n    setShowComplete(false);\n  };\n\n  const handleAll = () => {\n    setShowComplete(false);\n    setShowActive(false);\n  };\n\n  const handleComplete = () => {\n    setShowComplete(true);\n    setShowActive(false);\n  };\n\n  const clearCompleteTodos = () => {\n    let clearData = todos.filter((todo) => {\n      return todo.completed === false;\n    });\n    localStorage.setItem('todos', JSON.stringify(clearData));\n\n    setShowAll(true);\n\n    clearComplete(clearData);\n  };\n\n  const selectAll = () => {\n    if (showAll) {\n      const selectData = todos.map((todo) => {\n        todo.completed = true;\n\n        return todo;\n      });\n      setShowAll(false);\n      checkAll(selectData);\n    } else {\n      const selectData = todos.map((todo) => {\n        todo.completed = false;\n\n        return todo;\n      });\n      setShowAll(true);\n      uncheckAll(selectData);\n    }\n  };\n\n  const destroy = (todo) => {\n    var deletedList = todos.filter((candidate) => {\n      return candidate !== todo;\n    });\n\n    localStorage.setItem('todos', JSON.stringify(deletedList));\n\n    deleteTodo(deletedList);\n  };\n\n  return (\n    <div className=\"list\">\n      <TodoForm\n        handleChange={handleChange}\n        todo={todo}\n        handleKeyDown={handleKeyDown}\n        selectAll={selectAll}\n        activeTodosList={activeTodosList}\n        todos={todos}\n      />\n      {showActive\n        ? activeTodosList()\n        : showComplete\n        ? completeTodosList()\n        : todosList()}\n      {todos.length > 0 && (\n        <ListFooter\n          activeNumber={activeTodosList().length}\n          completedNumber={completeTodosList().length}\n          handleActive={handleActive}\n          handleAll={handleAll}\n          handleComplete={handleComplete}\n          handleClear={clearCompleteTodos}\n        />\n      )}\n    </div>\n  );\n};\n\nApp.propTypes = {\n  todos: PropTypes.array.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  todos: state.todo.todos,\n});\n\nexport default connect(mapStateToProps, {\n  addTodo,\n  getTodos,\n  deleteTodo,\n  clearComplete,\n  clickBox,\n  checkAll,\n  uncheckAll,\n})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  GET_TODOS,\n  ADD_TODO,\n  DELETE_TODO,\n  CLICK_BOX,\n  CLEAR_COMPLETE,\n  CHECK_ALL,\n  UNCHECK_ALL\n} from \"../actions/types\";\n\nconst initialState = {\n  todos: []\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case CHECK_ALL:\n    case UNCHECK_ALL:\n    case CLEAR_COMPLETE:\n    case DELETE_TODO:\n    case ADD_TODO:\n    case GET_TODOS:\n    case CLICK_BOX:\n      return {\n        ...state,\n        todos: action.payload\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport todoReducer from \"./todoReducer\";\n\nexport default combineReducers({\n  todo: todoReducer\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"./reducers\";\nimport thunk from \"redux-thunk\";\n\nconst initialState = {};\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  applyMiddleware(...middleware)\n);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}